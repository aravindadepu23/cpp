/* Given an array nums of distinct integers, return all the possible permutations. 
You can return the answer in any order.

case=1
input=3
1 2 3
output=[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]

Explanation:
Input: The first line is the number of elements, followed by their values.
Output: All possible permutations

case=2
input=2
0 1
output=[[0, 1], [1, 0]]

Note: The below function sorts a list of lists. You can use this to sort the 
subsets generated by your code.

public static void sortListOfList(List<List<Integer>> Subsets)
    {
        Collections.sort(Subsets, (a, b) ->
        {
            int sizeA = a.size();
            int sizeB = b.size();

            // Compare element by element
            for (int i = 0; i < Math.min(sizeA, sizeB); i++)
            {
                if (!a.get(i).equals(b.get(i)))
                {
                    return a.get(i) - b.get(i);
                }
            }

            // If all elements are equal, compare by size
            return sizeA - sizeB;
        });
    }

    */